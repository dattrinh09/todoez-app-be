// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int           @id @default(autoincrement())
  fullname      String
  email         String        @unique
  phone_number  String?
  hash_password String?
  hash_rtoken   String?
  avatar        String?
  is_verify     Boolean       @default(false)
  create_at     DateTime      @default(now())
  update_at     DateTime      @updatedAt()
  team_users    TeamUser[]
  project_users ProjectUser[]
}

model Team {
  id         Int        @id @default(autoincrement())
  name       String
  create_at  DateTime   @default(now())
  team_users TeamUser[]
}

model TeamUser {
  id         Int       @id @default(autoincrement())
  is_creator Boolean   @default(false)
  delete_at  DateTime? @db.Timestamp(0)
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id    Int
  team       Team      @relation(fields: [team_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  team_id    Int
  notes      Note[]

  @@unique([user_id, team_id])
}

model Note {
  id          Int      @id @default(autoincrement())
  content     String
  description String
  create_at   DateTime @default(now())
  update_at   DateTime @updatedAt()
  user        TeamUser @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id     Int
}

model Project {
  id            Int           @id @default(autoincrement())
  name          String
  create_at     DateTime      @default(now())
  project_users ProjectUser[]
  sprints       Sprint[]
}

model ProjectUser {
  id           Int       @id @default(autoincrement())
  is_creator   Boolean   @default(false)
  delete_at    DateTime? @db.Timestamp(0)
  user         User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id      Int
  project      Project   @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  project_id   Int
  report_tasks Task[]    @relation("report")
  assign_tasks Task[]    @relation("assign")
  comments     Comment[]

  @@unique([user_id, project_id])
}

model Sprint {
  id         Int      @id @default(autoincrement())
  title      String
  start_at   DateTime
  end_at     DateTime
  project    Project  @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  project_id Int
  tasks      Task[]
}

model Task {
  id          Int         @id @default(autoincrement())
  type        String
  content     String
  description String
  status      String      @default("assign")
  priority    String
  create_at   DateTime    @default(now())
  update_at   DateTime    @updatedAt()
  end_at      DateTime
  sprint      Sprint      @relation(fields: [sprint_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sprint_id   Int
  reporter    ProjectUser @relation("report", fields: [reporter_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reporter_id Int
  assignee    ProjectUser @relation("assign", fields: [assignee_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  assignee_id Int
  comments    Comment[]
}

model Comment {
  id        Int         @id @default(autoincrement())
  content   String
  create_at DateTime    @default(now())
  update_at DateTime    @updatedAt()
  task      Task        @relation(fields: [task_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  task_id   Int
  user      ProjectUser @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id   Int
}
